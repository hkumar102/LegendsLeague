// <auto-generated />
using System;
using LegendsLeague.Infrastructure.Persistence.Fantasy;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LegendsLeague.Infrastructure.Persistence.Fantasy.Migrations
{
    [DbContext(typeof(FantasyDbContext))]
    [Migration("20250829041011_Fantasy_Update_1")]
    partial class Fantasy_Update_1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("fantasy")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.Draft", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CompletedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at_utc");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<int>("DraftType")
                        .HasColumnType("integer")
                        .HasColumnName("draft_type");

                    b.Property<Guid>("LeagueId")
                        .HasColumnType("uuid")
                        .HasColumnName("league_id");

                    b.Property<DateTimeOffset?>("ModifiedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at_utc");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<DateTimeOffset?>("ScheduledAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_at_utc");

                    b.Property<DateTimeOffset?>("StartedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at_utc");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("p_k_drafts");

                    b.HasIndex("LeagueId")
                        .IsUnique()
                        .HasDatabaseName("i_x_drafts_league_id");

                    b.ToTable("drafts", "fantasy");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.DraftPick", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("DraftId")
                        .HasColumnType("uuid")
                        .HasColumnName("draft_id");

                    b.Property<Guid>("LeagueTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("league_team_id");

                    b.Property<DateTimeOffset?>("ModifiedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at_utc");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<int>("OverallPickNumber")
                        .HasColumnType("integer")
                        .HasColumnName("overall_pick_number");

                    b.Property<int>("PickInRound")
                        .HasColumnType("integer")
                        .HasColumnName("pick_in_round");

                    b.Property<DateTimeOffset?>("PickedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("picked_at_utc");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("player_id");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("integer")
                        .HasColumnName("round_number");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("p_k_draft_picks");

                    b.HasIndex("LeagueTeamId")
                        .HasDatabaseName("ix_draft_picks_league_team");

                    b.HasIndex("PlayerId")
                        .HasDatabaseName("i_x_draft_picks_player_id");

                    b.HasIndex("DraftId", "OverallPickNumber")
                        .IsUnique()
                        .HasDatabaseName("ux_draft_picks_draft_overall");

                    b.HasIndex("DraftId", "PlayerId")
                        .IsUnique()
                        .HasDatabaseName("ux_draft_picks_draft_player");

                    b.ToTable("draft_picks", "fantasy");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.FantasyLeague", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CommissionerId")
                        .HasColumnType("uuid")
                        .HasColumnName("commissioner_id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<int>("MaxTeams")
                        .HasColumnType("integer")
                        .HasColumnName("max_teams");

                    b.Property<DateTimeOffset?>("ModifiedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at_utc");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<Guid>("SeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("series_id");

                    b.HasKey("Id")
                        .HasName("p_k_leagues");

                    b.HasIndex("SeriesId", "Name")
                        .HasDatabaseName("i_x_leagues_series_id_name");

                    b.ToTable("leagues", "fantasy");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.LeagueMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("InvitedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("invited_at_utc");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("JoinedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_at_utc");

                    b.Property<Guid>("LeagueId")
                        .HasColumnType("uuid")
                        .HasColumnName("league_id");

                    b.Property<DateTimeOffset?>("ModifiedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at_utc");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("p_k_league_members");

                    b.HasIndex("LeagueId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("i_x_league_members_league_id_user_id");

                    b.ToTable("league_members", "fantasy");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.LeagueTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("LeagueId")
                        .HasColumnType("uuid")
                        .HasColumnName("league_id");

                    b.Property<DateTimeOffset?>("ModifiedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at_utc");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("p_k_league_teams");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("i_x_league_teams_owner_id");

                    b.HasIndex("LeagueId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ux_league_teams_league_name");

                    b.HasIndex("LeagueId", "OwnerId")
                        .IsUnique()
                        .HasDatabaseName("ux_league_teams_league_owner");

                    b.ToTable("league_teams", "fantasy");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.RosterPlayer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("ActiveFromUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("active_from_utc");

                    b.Property<DateTimeOffset?>("ActiveToUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("active_to_utc");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("LeagueTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("league_team_id");

                    b.Property<DateTimeOffset?>("ModifiedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at_utc");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("player_id");

                    b.Property<int>("Slot")
                        .HasColumnType("integer")
                        .HasColumnName("slot");

                    b.HasKey("Id")
                        .HasName("p_k_roster_players");

                    b.HasIndex("LeagueTeamId", "PlayerId", "Slot")
                        .HasDatabaseName("i_x_roster_players_league_team_id_player_id_slot");

                    b.ToTable("roster_players", "fantasy");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fixtures.Fixture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AwayTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("away_team_id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("HomeTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("home_team_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("ModifiedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at_utc");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<Guid>("SeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("series_id");

                    b.Property<DateTimeOffset>("StartTimeUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time_utc");

                    b.HasKey("Id")
                        .HasName("p_k_fixture");

                    b.HasIndex("AwayTeamId")
                        .HasDatabaseName("i_x_fixture_away_team_id");

                    b.HasIndex("HomeTeamId")
                        .HasDatabaseName("i_x_fixture_home_team_id");

                    b.HasIndex("SeriesId")
                        .HasDatabaseName("i_x_fixture_series_id");

                    b.ToTable("fixture", "fantasy");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fixtures.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Batting")
                        .HasColumnType("integer")
                        .HasColumnName("batting");

                    b.Property<int>("Bowling")
                        .HasColumnType("integer")
                        .HasColumnName("bowling");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("ModifiedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at_utc");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<Guid>("RealTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("real_team_id");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<Guid>("SeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("series_id");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.HasKey("Id")
                        .HasName("p_k_player");

                    b.HasIndex("RealTeamId")
                        .HasDatabaseName("i_x_player_real_team_id");

                    b.HasIndex("SeriesId")
                        .HasDatabaseName("i_x_player_series_id");

                    b.ToTable("player", "fantasy");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fixtures.RealTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("ModifiedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at_utc");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("SeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("series_id");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.HasKey("Id")
                        .HasName("p_k_real_team");

                    b.HasIndex("SeriesId")
                        .HasDatabaseName("i_x_real_team_series_id");

                    b.ToTable("real_team", "fantasy");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fixtures.Series", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("ModifiedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at_utc");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("SeasonYear")
                        .HasColumnType("integer")
                        .HasColumnName("season_year");

                    b.HasKey("Id")
                        .HasName("p_k_series");

                    b.ToTable("series", "fantasy");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.Draft", b =>
                {
                    b.HasOne("LegendsLeague.Domain.Entities.Fantasy.FantasyLeague", "League")
                        .WithOne("Draft")
                        .HasForeignKey("LegendsLeague.Domain.Entities.Fantasy.Draft", "LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_drafts_leagues_league_id");

                    b.Navigation("League");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.DraftPick", b =>
                {
                    b.HasOne("LegendsLeague.Domain.Entities.Fantasy.Draft", "Draft")
                        .WithMany("Picks")
                        .HasForeignKey("DraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_draft_picks_drafts_draft_id");

                    b.HasOne("LegendsLeague.Domain.Entities.Fantasy.LeagueTeam", "LeagueTeam")
                        .WithMany("Picks")
                        .HasForeignKey("LeagueTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_draft_picks_league_teams_league_team_id");

                    b.HasOne("LegendsLeague.Domain.Entities.Fixtures.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_draft_picks_player_player_id");

                    b.Navigation("Draft");

                    b.Navigation("LeagueTeam");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.FantasyLeague", b =>
                {
                    b.HasOne("LegendsLeague.Domain.Entities.Fixtures.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_leagues_series_series_id");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.LeagueMember", b =>
                {
                    b.HasOne("LegendsLeague.Domain.Entities.Fantasy.FantasyLeague", "League")
                        .WithMany("Members")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_league_members_leagues_league_id");

                    b.Navigation("League");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.LeagueTeam", b =>
                {
                    b.HasOne("LegendsLeague.Domain.Entities.Fantasy.FantasyLeague", "League")
                        .WithMany("Teams")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_league_teams_leagues_league_id");

                    b.HasOne("LegendsLeague.Domain.Entities.Fantasy.LeagueMember", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_league_teams_league_members_owner_id");

                    b.Navigation("League");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.RosterPlayer", b =>
                {
                    b.HasOne("LegendsLeague.Domain.Entities.Fantasy.LeagueTeam", "LeagueTeam")
                        .WithMany("Roster")
                        .HasForeignKey("LeagueTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_roster_players_league_teams_league_team_id");

                    b.Navigation("LeagueTeam");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fixtures.Fixture", b =>
                {
                    b.HasOne("LegendsLeague.Domain.Entities.Fixtures.RealTeam", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_fixture_real_team_away_team_id");

                    b.HasOne("LegendsLeague.Domain.Entities.Fixtures.RealTeam", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_fixture_real_team_home_team_id");

                    b.HasOne("LegendsLeague.Domain.Entities.Fixtures.Series", "Series")
                        .WithMany("Fixtures")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_fixture_series_series_id");

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fixtures.Player", b =>
                {
                    b.HasOne("LegendsLeague.Domain.Entities.Fixtures.RealTeam", "RealTeam")
                        .WithMany()
                        .HasForeignKey("RealTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_player_real_team_real_team_id");

                    b.HasOne("LegendsLeague.Domain.Entities.Fixtures.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_player_series_series_id");

                    b.Navigation("RealTeam");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fixtures.RealTeam", b =>
                {
                    b.HasOne("LegendsLeague.Domain.Entities.Fixtures.Series", "Series")
                        .WithMany("RealTeams")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_real_team_series_series_id");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.Draft", b =>
                {
                    b.Navigation("Picks");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.FantasyLeague", b =>
                {
                    b.Navigation("Draft")
                        .IsRequired();

                    b.Navigation("Members");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.LeagueTeam", b =>
                {
                    b.Navigation("Picks");

                    b.Navigation("Roster");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fixtures.Series", b =>
                {
                    b.Navigation("Fixtures");

                    b.Navigation("RealTeams");
                });
#pragma warning restore 612, 618
        }
    }
}
