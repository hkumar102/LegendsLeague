// <auto-generated />
using System;
using LegendsLeague.Infrastructure.Persistence.Fantasy;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LegendsLeague.Infrastructure.Persistence.Fantasy.Migrations
{
    [DbContext(typeof(FantasyDbContext))]
    partial class FantasyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("fantasy")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.Draft", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("LeagueId")
                        .HasColumnType("uuid")
                        .HasColumnName("league_id");

                    b.Property<DateTimeOffset?>("ModifiedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at_utc");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<DateTimeOffset>("StartsAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starts_at_utc");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("p_k_drafts");

                    b.HasIndex("LeagueId", "Status")
                        .HasDatabaseName("i_x_drafts_league_id_status");

                    b.ToTable("drafts", "fantasy");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.DraftPick", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("DraftId")
                        .HasColumnType("uuid")
                        .HasColumnName("draft_id");

                    b.Property<Guid>("LeagueTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("league_team_id");

                    b.Property<DateTimeOffset>("MadeAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("made_at_utc");

                    b.Property<DateTimeOffset?>("ModifiedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at_utc");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<int?>("PickNo")
                        .HasColumnType("integer")
                        .HasColumnName("pick_no");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("player_id");

                    b.Property<int?>("RoundNo")
                        .HasColumnType("integer")
                        .HasColumnName("round_no");

                    b.HasKey("Id")
                        .HasName("p_k_draft_picks");

                    b.HasIndex("LeagueTeamId", "DraftId")
                        .HasDatabaseName("i_x_draft_picks_league_team_id_draft_id");

                    b.HasIndex("DraftId", "RoundNo", "PickNo")
                        .HasDatabaseName("i_x_draft_picks_draft_id_round_no_pick_no");

                    b.ToTable("draft_picks", "fantasy");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.FantasyLeague", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CommissionerUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("commissioner_user_id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<int>("MaxTeams")
                        .HasColumnType("integer")
                        .HasColumnName("max_teams");

                    b.Property<DateTimeOffset?>("ModifiedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at_utc");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<Guid>("SeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("series_id");

                    b.HasKey("Id")
                        .HasName("p_k_leagues");

                    b.HasIndex("SeriesId", "Name")
                        .HasDatabaseName("i_x_leagues_series_id_name");

                    b.ToTable("leagues", "fantasy");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.LeagueMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("InvitedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("invited_at_utc");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("JoinedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_at_utc");

                    b.Property<Guid>("LeagueId")
                        .HasColumnType("uuid")
                        .HasColumnName("league_id");

                    b.Property<DateTimeOffset?>("ModifiedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at_utc");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("p_k_league_members");

                    b.HasIndex("LeagueId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("i_x_league_members_league_id_user_id");

                    b.ToTable("league_members", "fantasy");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.LeagueTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<int?>("DraftPosition")
                        .HasColumnType("integer")
                        .HasColumnName("draft_position");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("LeagueId")
                        .HasColumnType("uuid")
                        .HasColumnName("league_id");

                    b.Property<DateTimeOffset?>("ModifiedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at_utc");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_user_id");

                    b.HasKey("Id")
                        .HasName("p_k_league_teams");

                    b.HasIndex("LeagueId", "Name")
                        .HasDatabaseName("i_x_league_teams_league_id_name");

                    b.HasIndex("LeagueId", "OwnerUserId")
                        .HasDatabaseName("i_x_league_teams_league_id_owner_user_id");

                    b.ToTable("league_teams", "fantasy");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.RosterPlayer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("ActiveFromUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("active_from_utc");

                    b.Property<DateTimeOffset?>("ActiveToUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("active_to_utc");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("LeagueTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("league_team_id");

                    b.Property<DateTimeOffset?>("ModifiedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at_utc");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("player_id");

                    b.Property<int>("Slot")
                        .HasColumnType("integer")
                        .HasColumnName("slot");

                    b.HasKey("Id")
                        .HasName("p_k_roster_players");

                    b.HasIndex("LeagueTeamId", "PlayerId", "Slot")
                        .HasDatabaseName("i_x_roster_players_league_team_id_player_id_slot");

                    b.ToTable("roster_players", "fantasy");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.Draft", b =>
                {
                    b.HasOne("LegendsLeague.Domain.Entities.Fantasy.FantasyLeague", "League")
                        .WithMany("Drafts")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_drafts_leagues_league_id");

                    b.Navigation("League");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.DraftPick", b =>
                {
                    b.HasOne("LegendsLeague.Domain.Entities.Fantasy.Draft", "Draft")
                        .WithMany("Picks")
                        .HasForeignKey("DraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_draft_picks_drafts_draft_id");

                    b.HasOne("LegendsLeague.Domain.Entities.Fantasy.LeagueTeam", "LeagueTeam")
                        .WithMany()
                        .HasForeignKey("LeagueTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_draft_picks_league_teams_league_team_id");

                    b.Navigation("Draft");

                    b.Navigation("LeagueTeam");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.LeagueMember", b =>
                {
                    b.HasOne("LegendsLeague.Domain.Entities.Fantasy.FantasyLeague", "League")
                        .WithMany("Members")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_league_members_leagues_league_id");

                    b.Navigation("League");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.LeagueTeam", b =>
                {
                    b.HasOne("LegendsLeague.Domain.Entities.Fantasy.FantasyLeague", "League")
                        .WithMany("Teams")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_league_teams_leagues_league_id");

                    b.Navigation("League");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.RosterPlayer", b =>
                {
                    b.HasOne("LegendsLeague.Domain.Entities.Fantasy.LeagueTeam", "LeagueTeam")
                        .WithMany("Roster")
                        .HasForeignKey("LeagueTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_roster_players_league_teams_league_team_id");

                    b.Navigation("LeagueTeam");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.Draft", b =>
                {
                    b.Navigation("Picks");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.FantasyLeague", b =>
                {
                    b.Navigation("Drafts");

                    b.Navigation("Members");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fantasy.LeagueTeam", b =>
                {
                    b.Navigation("Roster");
                });
#pragma warning restore 612, 618
        }
    }
}
