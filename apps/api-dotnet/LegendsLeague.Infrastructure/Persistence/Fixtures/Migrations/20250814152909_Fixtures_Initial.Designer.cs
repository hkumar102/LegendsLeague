// <auto-generated />
using System;
using LegendsLeague.Infrastructure.Persistence.Fixtures;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LegendsLeague.Infrastructure.Persistence.Fixtures.Migrations
{
    [DbContext(typeof(FixturesDbContext))]
    [Migration("20250814152909_Fixtures_Initial")]
    partial class Fixtures_Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("fixtures")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fixtures.Fixture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AwayTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("away_team_id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("HomeTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("home_team_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("ModifiedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at_utc");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<Guid>("SeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("series_id");

                    b.Property<DateTimeOffset>("StartTimeUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time_utc");

                    b.HasKey("Id")
                        .HasName("p_k_fixtures");

                    b.HasIndex("AwayTeamId")
                        .HasDatabaseName("i_x_fixtures_away_team_id");

                    b.HasIndex("HomeTeamId")
                        .HasDatabaseName("i_x_fixtures_home_team_id");

                    b.HasIndex("SeriesId")
                        .HasDatabaseName("i_x_fixtures_series_id");

                    b.ToTable("fixtures", "fixtures");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fixtures.RealTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("ModifiedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at_utc");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<Guid>("SeriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("series_id");

                    b.Property<string>("ShortName")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("short_name");

                    b.HasKey("Id")
                        .HasName("p_k_real_teams");

                    b.HasIndex("SeriesId")
                        .HasDatabaseName("i_x_real_teams_series_id");

                    b.ToTable("real_teams", "fixtures");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fixtures.Series", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("ModifiedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at_utc");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<int>("SeasonYear")
                        .HasColumnType("integer")
                        .HasColumnName("season_year");

                    b.HasKey("Id")
                        .HasName("p_k_series");

                    b.ToTable("series", "fixtures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAtUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Indian Premier League",
                            SeasonYear = 2026
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAtUtc = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "ICC T20 World Cup",
                            SeasonYear = 2026
                        });
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fixtures.Fixture", b =>
                {
                    b.HasOne("LegendsLeague.Domain.Entities.Fixtures.RealTeam", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_fixtures_real_teams_away_team_id");

                    b.HasOne("LegendsLeague.Domain.Entities.Fixtures.RealTeam", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_fixtures_real_teams_home_team_id");

                    b.HasOne("LegendsLeague.Domain.Entities.Fixtures.Series", "Series")
                        .WithMany("Fixtures")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_fixtures_series_series_id");

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fixtures.RealTeam", b =>
                {
                    b.HasOne("LegendsLeague.Domain.Entities.Fixtures.Series", "Series")
                        .WithMany("RealTeams")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_real_teams_series_series_id");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("LegendsLeague.Domain.Entities.Fixtures.Series", b =>
                {
                    b.Navigation("Fixtures");

                    b.Navigation("RealTeams");
                });
#pragma warning restore 612, 618
        }
    }
}
